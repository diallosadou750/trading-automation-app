version: '3.8'

services:
  # Base de donn√©es PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: trading_postgres
    environment:
      POSTGRES_DB: trading_db
      POSTGRES_USER: trading_user
      POSTGRES_PASSWORD: trading_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - trading_network
    restart: unless-stopped

  # Cache Redis
  redis:
    image: redis:7-alpine
    container_name: trading_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - trading_network
    restart: unless-stopped

  # Backend FastAPI
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: trading_backend
    environment:
      - DATABASE_URL=postgresql+asyncpg://trading_user:trading_password@postgres:5432/trading_db
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=your-super-secret-key-here
      - API_AES_SECRET=32octetsupersecretkey!!
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
    networks:
      - trading_network
    restart: unless-stopped
    volumes:
      - ./backend:/app
      - /app/__pycache__

  # Frontend Flutter
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: trading_frontend
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - trading_network
    restart: unless-stopped

  # Nginx reverse proxy (optionnel)
  nginx:
    image: nginx:alpine
    container_name: trading_nginx
    ports:
      - "8080:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - backend
      - frontend
    networks:
      - trading_network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  trading_network:
    driver: bridge 