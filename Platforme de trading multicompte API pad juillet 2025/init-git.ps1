# üöÄ Script PowerShell d'initialisation Git pour l'application de trading
# Ce script automatise la cr√©ation du repository GitHub et la premi√®re publication

# Arr√™ter en cas d'erreur
$ErrorActionPreference = "Stop"

Write-Host "üöÄ Initialisation Git pour l'application de trading automatique" -ForegroundColor Green
Write-Host "================================================================" -ForegroundColor Green

# Fonction pour afficher les messages color√©s
function Write-Success {
    param([string]$Message)
    Write-Host $Message -ForegroundColor Green
}

function Write-Warning {
    param([string]$Message)
    Write-Host $Message -ForegroundColor Yellow
}

function Write-Error {
    param([string]$Message)
    Write-Host $Message -ForegroundColor Red
}

function Write-Info {
    param([string]$Message)
    Write-Host $Message -ForegroundColor Blue
}

# V√©rifier que Git est install√©
try {
    $null = git --version
    Write-Success "‚úÖ Git est install√©"
} catch {
    Write-Error "‚ùå Git n'est pas install√©. Veuillez l'installer d'abord depuis https://git-scm.com/"
    exit 1
}

# Demander le nom d'utilisateur GitHub
Write-Host ""
Write-Info "üìù Configuration GitHub"
$GITHUB_USERNAME = Read-Host "Entrez votre nom d'utilisateur GitHub"

if ([string]::IsNullOrEmpty($GITHUB_USERNAME)) {
    Write-Error "‚ùå Le nom d'utilisateur GitHub est requis"
    exit 1
}

# Demander le nom du repository
$REPO_NAME = Read-Host "Entrez le nom du repository (d√©faut: trading-automation-app)"
if ([string]::IsNullOrEmpty($REPO_NAME)) {
    $REPO_NAME = "trading-automation-app"
}

# Demander si le repository doit √™tre public ou priv√©
Write-Host ""
Write-Info "üîí Visibilit√© du repository"
Write-Host "1. Public (visible par tous)"
Write-Host "2. Priv√© (visible uniquement par vous et vos collaborateurs)"
$VISIBILITY = Read-Host "Choisissez la visibilit√© (1 ou 2)"

if ($VISIBILITY -eq "2") {
    $REPO_PRIVATE = $true
    Write-Success "‚úÖ Repository priv√© s√©lectionn√©"
} else {
    $REPO_PRIVATE = $false
    Write-Success "‚úÖ Repository public s√©lectionn√©"
}

# V√©rifier que nous sommes dans le bon r√©pertoire
if (-not (Test-Path "docker-compose.yml") -or -not (Test-Path "backend") -or -not (Test-Path "frontend")) {
    Write-Error "‚ùå Ce script doit √™tre ex√©cut√© depuis la racine du projet (o√π se trouve docker-compose.yml)"
    exit 1
}

Write-Success "‚úÖ R√©pertoire de projet d√©tect√©"

# V√©rifier si Git est d√©j√† initialis√©
if (Test-Path ".git") {
    Write-Warning "‚ö†Ô∏è  Git est d√©j√† initialis√© dans ce r√©pertoire"
    $OVERWRITE = Read-Host "Voulez-vous continuer et √©craser la configuration existante? (y/N)"
    if ($OVERWRITE -ne "y" -and $OVERWRITE -ne "Y") {
        Write-Info "‚ùå Op√©ration annul√©e"
        exit 0
    }
    Remove-Item -Recurse -Force ".git"
    Write-Success "‚úÖ Configuration Git existante supprim√©e"
}

# Initialiser Git
Write-Info "üîß Initialisation de Git..."
git init

# Ajouter tous les fichiers
Write-Info "üìÅ Ajout des fichiers..."
git add .

# Premier commit
Write-Info "üíæ Premier commit..."
git commit -m "Initial commit: Application de trading automatique multi-plateforme

- Backend FastAPI avec authentification s√©curis√©e
- Frontend Flutter responsive
- Gestion des cl√©s API avec chiffrement AES-256
- Interface admin avanc√©e
- Monitoring et alertes
- Configuration Docker compl√®te"

# Cr√©er le repository sur GitHub
Write-Info "üåê Cr√©ation du repository sur GitHub..."
$REPO_URL = "https://github.com/$GITHUB_USERNAME/$REPO_NAME"

# V√©rifier si l'utilisateur a GitHub CLI configur√©
try {
    $null = gh --version
    $null = gh auth status
    Write-Success "‚úÖ GitHub CLI d√©tect√©, cr√©ation du repository..."
    
    if ($REPO_PRIVATE) {
        gh repo create "$REPO_NAME" --description "Application de trading automatique multi-plateforme" --private --source=. --remote=origin --push
    } else {
        gh repo create "$REPO_NAME" --description "Application de trading automatique multi-plateforme" --public --source=. --remote=origin --push
    }
    Write-Success "‚úÖ Repository cr√©√© et code pouss√© avec succ√®s!"
} catch {
    Write-Warning "‚ö†Ô∏è  GitHub CLI non d√©tect√© ou non authentifi√©"
    Write-Info "üìã Instructions manuelles:"
    Write-Host ""
    Write-Host "1. Allez sur https://github.com/new"
    Write-Host "2. Nom du repository: $REPO_NAME"
    Write-Host "3. Description: Application de trading automatique multi-plateforme"
    Write-Host "4. Visibilit√©: $(if ($REPO_PRIVATE) { 'Priv√©' } else { 'Public' })"
    Write-Host "5. NE PAS cocher 'Initialize with README'"
    Write-Host "6. Cliquez sur 'Create repository'"
    Write-Host ""
    Read-Host "Appuyez sur Entr√©e une fois le repository cr√©√©..."

    # Ajouter le remote et pousser
    Write-Info "üîó Ajout du remote GitHub..."
    git remote add origin "https://github.com/$GITHUB_USERNAME/$REPO_NAME.git"
    
    Write-Info "üì§ Push vers GitHub..."
    git branch -M main
    git push -u origin main
}

# Mettre √† jour les URLs dans les fichiers
Write-Info "üîß Mise √† jour des URLs dans les fichiers..."

# Mettre √† jour le README
(Get-Content "README.md") -replace "VOTRE_USERNAME", $GITHUB_USERNAME -replace "trading-automation-app", $REPO_NAME | Set-Content "README.md"

# Mettre √† jour le DEPLOYMENT.md
(Get-Content "DEPLOYMENT.md") -replace "VOTRE_USERNAME", $GITHUB_USERNAME -replace "trading-automation-app", $REPO_NAME | Set-Content "DEPLOYMENT.md"

# Commit des modifications
git add README.md DEPLOYMENT.md
git commit -m "docs: Mise √† jour des URLs avec le nom d'utilisateur GitHub"
git push

# Cr√©er les branches de d√©veloppement
Write-Info "üåø Cr√©ation des branches de d√©veloppement..."
git checkout -b develop
git push -u origin develop

git checkout -b feature/initial-setup
git push -u origin feature/initial-setup

git checkout main

# Cr√©er les fichiers de configuration GitHub
Write-Info "‚öôÔ∏è  Configuration GitHub..."

# Cr√©er le dossier .github
if (-not (Test-Path ".github")) {
    New-Item -ItemType Directory -Path ".github"
}

# Cr√©er le fichier .github/ISSUE_TEMPLATE.md
$issueTemplate = @"
## üêõ Description du probl√®me
<!-- D√©crivez le probl√®me rencontr√© -->

## üîç √âtapes pour reproduire
1. 
2. 
3. 

## üì± Environnement
- OS: 
- Navigateur: 
- Version de l'app: 

## üì∏ Captures d'√©cran
<!-- Si applicable -->

## üíª Logs
<!-- Copiez les logs d'erreur ici -->
"@

$issueTemplate | Out-File -FilePath ".github/ISSUE_TEMPLATE.md" -Encoding UTF8

# Cr√©er le fichier .github/PULL_REQUEST_TEMPLATE.md
$prTemplate = @"
## üìù Description
<!-- D√©crivez les changements apport√©s -->

## üîß Type de changement
- [ ] Correction de bug
- [ ] Nouvelle fonctionnalit√©
- [ ] Am√©lioration de performance
- [ ] Documentation
- [ ] Refactoring

## ‚úÖ Tests
- [ ] Tests unitaires passent
- [ ] Tests d'int√©gration passent
- [ ] Tests manuels effectu√©s

## üì± Compatibilit√©
- [ ] Compatible mobile
- [ ] Compatible tablette
- [ ] Compatible desktop

## üìã Checklist
- [ ] Code comment√©
- [ ] Documentation mise √† jour
- [ ] Pas de logs sensibles
- [ ] Variables d'environnement document√©es
"@

$prTemplate | Out-File -FilePath ".github/PULL_REQUEST_TEMPLATE.md" -Encoding UTF8

# Commit des templates
git add .github/
git commit -m "docs: Ajout des templates GitHub pour issues et PR"
git push

# Afficher les informations finales
Write-Host ""
Write-Success "üéâ Initialisation Git termin√©e avec succ√®s!"
Write-Host ""
Write-Info "üìã Informations du repository:"
Write-Host "   URL: https://github.com/$GITHUB_USERNAME/$REPO_NAME"
Write-Host "   Visibilit√©: $(if ($REPO_PRIVATE) { 'Priv√©' } else { 'Public' })"
Write-Host ""
Write-Info "üöÄ Prochaines √©tapes:"
Write-Host "   1. Testez l'application localement: docker-compose up --build"
Write-Host "   2. Partagez le lien GitHub avec vos testeurs"
Write-Host "   3. Cr√©ez des issues pour les bugs trouv√©s"
Write-Host "   4. Consultez le guide de d√©ploiement: DEPLOYMENT.md"
Write-Host ""
Write-Info "üîó Liens utiles:"
Write-Host "   - Repository: https://github.com/$GITHUB_USERNAME/$REPO_NAME"
Write-Host "   - Issues: https://github.com/$GITHUB_USERNAME/$REPO_NAME/issues"
Write-Host "   - Actions: https://github.com/$GITHUB_USERNAME/$REPO_NAME/actions"
Write-Host ""
Write-Success "‚úÖ Votre application est maintenant pr√™te pour les tests et le partage!" 